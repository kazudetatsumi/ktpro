#!/usr/bin/env python
# This script reads a Cn.hdf5 file generated by optbinwidth4D_wholefort.py  for an INS data set
# and generate a file listing optimal bin-widths extrapolated to a series of total counts from the cost function of the data.
# 2020/10/31 Kazuyoshi TATSUMI
import numpy as np
import h5py
### global parameters
### m / n ratio for the extrapolation
init_mnr = 0.1
end_mnr = 150.1
d_mnr = 0.1
### directory having a Cn.hdf5 file
head = "./10h/"


def get_optid(m, n, Cn, kave, delta):
    ex = np.zeros((delta.shape[0], delta.shape[1], delta.shape[2], delta.shape[3]))
    ex[:, :, :, :] = (1/m - 1/n) * kave[:, :, :, :] / (delta[:, :, :, :]**2*n)
    Cm = ex + Cn
    optid = np.unravel_index(np.argmin(Cm, axis=None), Cm.shape)
    return optid


def readcostfile(head):
    f = h5py.File(head+"Cn.hdf5", 'r')
    Cn = f["Cn"]
    delta = f["delta"]
    kave = f["kave"]
    g = h5py.File(head+"eliminated_data.hdf5", 'r')
    n = np.sum(g["data4"])
    return Cn, delta, kave, n


def runex():
    Cn, delta, kave, n = readcostfile(head)
    Cn = Cn / (n**2)   # This is according to the Cn in NeCo(2007)
    with open("result_only_extrapolate", mode='w') as f:
        for mn_ratio in np.arange(init_mnr, end_mnr, d_mnr):
            m = int(mn_ratio * n)*1.0
            optid = get_optid(m, n, Cn, kave, delta)
            f.write('{0} {1} {2} {3} {4} \n'.format(optid[0]+1, optid[1]+1, optid[2]+1, optid[3]+1, m))


runex()
