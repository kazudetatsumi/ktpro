#!/usr/bin/env python

#
# trajectory_siki.py
# 
# Calculate scan trajectories for 0D and 1D system
#
# R.K., Feb. 19, 2004
# revised for 4SEASONS, June 17, 2009
# revised using matplotlib, Nov. 24, 2009
# revised to add new detectors, Feb. 27, 2014
# revised to add new detectors, Mar. 29, 2016
# revised to add new detectors, Nov. 05, 2018
# revised to make compatible with python 3, Nov. 17, 2018
# revised to add new detectors, Feb. 16, 2019
# revised to add new detectors, Dec. 06, 2019

### for python 3 compatibility
from __future__ import print_function
if hasattr(__builtins__, 'raw_input'):
    input = raw_input
###
from scipy import *
#from pylab import *
import matplotlib.pyplot as plt


# array of two-theta's (two-theta on the equatorial plane)
tths = [
    -35.3286, -34.8856, -34.4417, -33.9971, -33.5519, -33.1060, -32.6595, 
    -32.2126, -31.7651, -31.3173, -30.8691, -30.4206, -29.9718, -29.5229,
    -29.0738, -28.6246, -28.1754, -27.7263, -27.2772, -26.8282, -26.3795,
    -25.9310, -25.4828, -25.0349, -24.5875, -24.1405, -23.6940, -23.2482,
    -22.8029, -22.3583, -21.9145, -21.4714, -20.1286, -19.6856, -19.2417,
    -18.7971, -18.3519, -17.9060, -17.4596, -17.0126, -16.5652, -16.1173,
    -15.6691, -15.2206, -14.7718, -14.3229, -13.8738, -13.4246, -12.9754,
    -12.5263, -12.0772, -11.6282, -11.1795, -10.7310, -10.2828,  -9.8349,
     -9.3875,  -8.9405,  -8.4941,  -8.0482,  -7.6030,  -7.1584,  -6.7145,
     -6.2715,  -4.9287,  -4.4857,  -4.0418,
      4.0207,   4.4692,   4.9174,   5.3652,   5.8127,   6.2596,   6.7061,
      7.1519,   7.5972,   8.0418,   8.4856,   8.9287,  10.2714,  10.7145,
     11.1584,  11.6029,  12.0482,  12.4941,  12.9405,  13.3875,  13.8349,
     14.2828,  14.7310,  15.1795,  15.6282,  16.0772,  16.5263,  16.9754,
     17.4246,  17.8738,  18.3229,  18.7718,  19.2206,  19.6691,  20.1173,
     20.5651,  21.0126,  21.4596,  21.9060,  22.3519,  22.7971,  23.2417,
     23.6856,  24.1286,  25.4714,  25.9145,  26.3583,  26.8029,  27.2482,
     27.6940,  28.1405,  28.5875,  29.0349,  29.4827,  29.9310,  30.3795,
     30.8282,  31.2772,  31.7262,  32.1754,  32.6246,  33.0738,  33.5229,
     33.9718,  34.4206,  34.8691,  35.3173,  35.7651,  36.2126,  36.6595,
     37.1060,  37.5519,  37.9971,  38.4417,  38.8856,  39.3286,  40.6714,
     41.1145,  41.5583,  42.0029,  42.4482,  42.8940,  43.3405,  43.7875,
     44.2349,  44.6827,  45.1309,  45.5795,  46.0282,  46.4772,  46.9262,
     47.3754,  47.8246,  48.2738,  48.7229,  49.1718,  49.6206,  50.0691,
     50.5173,  50.9651,  51.4126,  51.8595,  52.3060,  52.7519,  53.1971,
     53.6417,  54.0855,  54.5286,  55.8714,  56.3145,  56.7583,  57.2029,
     57.6481,  58.0940,  58.5405,  58.9875,  59.4349,  59.8827,  60.3309,
     60.7794,  61.2282,  61.6772,  62.1262,  62.5754,  63.0246,  63.4738,
     63.9229,  64.3718,  64.8206,  65.2691,  65.7173,  66.1651,  66.6126,
     67.0595,  67.5060,  67.9519,  68.3971,  68.8417,  69.2855,  69.7286,
     71.0714,  71.5145,  71.9583,  72.4029,  72.8481,  73.2940,  73.7405,
     74.1874,  74.6349,  75.0827,  75.5309,  75.9794,  76.4282,  76.8771,
     77.3262,  77.7754,  78.2246,  78.6738,  79.1229,  79.5718,  80.0206,
     80.4691,  80.9173,  81.3651,  81.8126,  82.2595,  82.7060,  83.1519,
     83.5971,  84.0417,  84.4855,  84.9286,  86.2714,  86.7145,  87.1583,
     87.6029,  88.0481,  88.4940,  88.9405,  89.3874,  89.8349,  90.2827,
     90.7309,  91.1794,  91.6282,  92.0771,  92.5262,  92.9754,  93.4246,
     93.8738,  94.3229,  94.7718,  95.2206,  95.6691,  96.1173,  96.5651,
     97.0126,  97.4595,  97.9060,  98.3519,  98.7971,  99.2417,  99.6855,
    100.1286, 101.4714, 101.9145, 102.3583, 102.8029, 103.2481, 103.6940,
    104.1405, 104.5874, 105.0349, 105.4827, 105.9309, 106.3794, 106.8282,
    107.2771, 107.7262, 108.1754, 108.6246, 109.0738, 109.5228, 109.9718,
    110.4206, 110.8691, 111.3173, 111.7651, 112.2125, 112.6595, 113.1060,
    113.5519, 113.9971, 114.4417, 114.8855, 115.3286, 116.6714, 117.1145,
    117.5583, 118.0029, 118.4481, 118.8940, 119.3405, 119.7874, 120.2349,
    120.6827, 121.1309, 121.5794, 122.0282, 122.4771, 122.9262, 123.3754,
    123.8246, 124.2738, 124.7228, 125.1718, 125.6205, 126.0691, 126.5173,
    126.9651, 127.4125, 127.8595, 128.3060, 128.7518, 129.1971, 129.6417,
    130.0855 
]
# detectors behind the beam catcher
#      -3.5973,  -3.1520,  -2.7062, -2.2598,  -1.8129,  -1.3655,
#      -0.4703,  -0.0400,
#       0.4296,  0.8778,   1.3267,   1.7757,   2.2249,   2.6740,
#       3.1230,   3.5720,
E2K = 0.6946914     # conversion constant from sqrt(E) to k
estep = 50          # number of steps along the energy for drawing

Ei = float(input("Ei (meV)         : "))
dim = input("0D or 1D? (0/1)  : ")
if dim == "1":
    psi = input("psi (deg)        : ")
    rad_psi = float(psi)*pi/180.

azone = input("show zones? (y/n): ")
if azone == "y":
    a = input("lattice const (A): ")
    astar = 2*pi/float(a)


ki = E2K*sqrt(Ei)

dE = arange(0, Ei+Ei/float(estep)*0.5, Ei/float(estep))
Ef = Ei - dE
kf = E2K*sqrt(Ef)

for tth in tths:
    angle = tth*pi/180.
    if dim == "1":
        q = ki*sin(rad_psi)-kf*sin(rad_psi-angle)
    else:
        q = abs(sqrt(ki**2 + kf**2 - 2*ki*kf*cos(angle)))
    plt.plot(q,dE,'b')

plt.xlabel('Momentum Transfer (A-1)')
plt.ylabel('Energy Transfer (meV)')
plt.grid(linestyle=':')

ymax = Ei*1.1

if dim == "1":
    xmax = ki*(sin(rad_psi)-sin(rad_psi-tths[-1]*pi/180.))
    xmin = ki*(sin(rad_psi)-sin(rad_psi-tths[0]*pi/180.))
else:
    xmax = abs(sqrt(2*ki**2-2*ki**2*cos(tths[-1]*pi/180.)))
    xmin = 0.0

if azone == "y":
# show zone centers
    for i in range(int(xmin/astar), int(xmax/astar)+1):
        asx = array([astar*i,astar*i])
        asy = array([0.0,ymax])
        plt.plot(asx, asy, 'r')

#plt.xlim(xmin,xmax)
plt.ylim(0,ymax)

if dim == "1":
    if azone == "y":
        plt.title('Ei = ' + str(Ei) + ' meV, psi = ' + psi + ' deg, a = ' + a + ' A')
    else:
        plt.title('Ei = ' + str(Ei) + ' meV, psi = ' + psi + ' deg')
else:
    if azone == "y":
        plt.title('Ei = ' + str(Ei) + ' meV, a = ' + a + ' A')
    else:
        plt.title('Ei = ' + str(Ei) + ' meV')


plt.show()
